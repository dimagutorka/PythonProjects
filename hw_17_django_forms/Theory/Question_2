# SQL Injection
Следует всегда использовать Django-ORM так как она автоматически экранирует все параметры тем самым предотвращая SQL иньекции
Так же по возможности следует избегать написания сырых SQL запросов, а если и прибегать к ним то использовать экранирование передаваемых параметров

# XSS
По дефолту Джанго и так экранирует темплейты, поэтому все что нужно это самому не допустить лишней уязвимости позволив передать скрипт который будет пропущен.
Не использовать фильтр safe если только нет полной уверености в безопасности данных
Использовать заголовок  X-XSS-Protection, включается вот так - `SECURE_BROWSER_XSS_FILTER = True`

# CSRF
В темплейтах следует использовать тег {% csrf_token %} для форм, для API есть декоратор **csrf_exempt**

# Clickjacking
Использовать `X_FRAME_OPTIONS = 'DENY'` что бы запретить загружать наше приложение в iframe

#Insecure Authentication and Session Management**
Использовать надежные алгоритмы хеширования
Беспечить соблюдение надкежных полотик паролей
Включить секьюрные куки
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
Так же можно включить параметр SECURE_HSTS_SECONDS для включения HTTP Strict Transport Security (HSTS).

# Sensitive Data Exposure
Никогда не хардкодить чувствительные данные, вместо этого стоит использовать переменные окружения

# Directory Traversal
Использовать FileField и ImageField которые имеют валидаторы
Сгружать файлы с отдельного каталога изолированные от остального приложения